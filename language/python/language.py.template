# -*- coding: utf-8 -*-
# Myanmar Language Attributes module for python
# Copyright (C) 2014 Thura Hlaing

# This file is part of Paytan.

# Paytan is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# Paytan is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with Foobar.  If not, see <http://www.gnu.org/licenses/>.


# Only tested with python 3

import re
from itertools import repeat

{% for character in characters -%}
{{character.name}} = '{{character.value}}'
{% endfor -%}

{% for category in categories -%}
{{category.name}} = {{category.characters}}
{% endfor -%}

known_syllables = set({{ known_syllables }})

def is_valid_syllable (syllable):
    global known_syllables
    return syllable in known_syllables

class SyllableIter:
    def __init__(self, string):
        self.pattern = re.compile(u"{{syllable_rule}}", re.U)
        self.string = string
        self.start = 0

    def __iter__(self):
        return self

    def next(self):
        return self.__next__()

    def __next__(self):
        if self.start >= len(self.string):
            raise StopIteration

        match = self.pattern.search (self.string, self.start)
        if not match:
            therest = self.string[self.start:]
            self.start = len(self.string)
            return therest
        else:
            if match.start() == self.start:
                self.start = match.end()
                return match.group()
            else:
                ret = self.string[self.start:match.start()]
                self.start = match.start()
                return ret
